
Uwaga: kompilacja zadania nie powinna dawać błędów bądź ostrzeżeń np. CS0108
Aby upewnić się że tak jest można włączyć opcję:
Project properties -> Build -> Treat warnings as errors -> is ustawić set to All

-------------------------------------------------------------------------
Celem zadania jest zaimplementowanie wektora UniqueVector zawierającego liczby całkowite bez powtórzeń
wraz z operacjami na nim.
W zadaniu NIE MOŻNA korzystać z wbudowanych kolekcji (np. List<T>) oraz biblioteki LINQ. 
Rozwiązanie powinno znaleźć się w pliku UniqueVector.cs, gdzie znajduje się już stworzona klasa ze składową
tab (przechowuje elementy wektora) oraz zaimplementowana metoda ToString (nie należy zmieniać!!). 
Natomiast pliku Program.cs nie wolno modyfikować (z wyjątkiem odkomentowania etapów)!!!

Należy zaimplementować:

Etap 1 (2.0p)
- konstruktor bezparametrowy tworzący 0-elementowy wektor
- konstruktor przyjmujący tablicę int (może zawierać powtórzenia)
- właściwość tylko do odczytu Count zwracającą aktualną liczbę elementów w wektorze
- metodę Clone zwracającą głęboką kopie obiektu
- metodę Deconstruct, która dekonstruuje wektor na dwa równe wektory (jeżeli liczba elementów jest nieparzysta to
pierwszy wektor będzie miał element więcej)
- indeksator, który zwraca lub ustawia i-ty element wektora. W przypadku, gdy indeks nie wskazuje na żaden element
zgłaszany jest błąd IndexOutOfRangeException, wyjątki w C# zgłaszane są tak samo jak w C++ 
(https://docs.microsoft.com/pl-pl/dotnet/csharp/programming-guide/exceptions/)

Etap 2 (1.5p)
- operator porównania == i wszystko co jest z nim związane (szczególnie uważać na jedną z metod)
  Wektory są równe jeżeli wartość oraz kolejność elementów jest taka sama
- operator konwersji jawnej z int[] na UniqueVector
- operator konwersji niejawnej z UniqueVector na int[]
- operator konwersji niejawnej z int na UniqueVector - tworzy 1-elementowy wektor

Etap 3 (1.5p)
UWAGA: poniższe operacje nie powinny zmieniać kolejności elementów w wektorze. Kolejność elementów w wektorze wynikowym
powinna być zgodna z kolejnością przekazywanych parametrów.

- operator dodawania (UniqueVector + UniqueVector), który tworzy nowy wektor poprzez połączenie dwóch podanych wektorów.
  Wynikiem jest nowy wektor.
- operator mnożenia (UniqueVector * UniqueVector), który zwraca część wspólną dwóch podanych wektorów. Wynikiem jest nowy
  wektor.
- operator inkrementacji (UniqueVector++ lub ++UniqueVector), który inkrementuje wszystkie wartości wektora (+1)

